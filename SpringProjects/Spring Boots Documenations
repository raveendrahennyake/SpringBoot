Main HTTP methods=>
@GetMapping
@PostMapping
@DelectMapping
@PutMapping

Main Layer In SpringBoots
Model
Controll
Servise
Repository


@GetMapping
@GetMapping("/FirtsOne")
    public List <Book> getbook () {
        return bookService.getbook();

 public List <Book> getbook () {
        return bookReposotory .findAll();
    }

@GetMapping("/{id}")
    public Optional <Book> getbooks ( Integer id) {
        return bookService.getbooks(id);

 public Optional <Book> getbooks (Integer id) {
        return bookReposotory.findById(id);
    }


@GetMapping("/sectiontwo")
    public Book getbooks (String tilte) {
        return bookService.getbookse(tilte);
    }

 public Book getbookse (String tilte) {
        return bookReposotory.findBytilte("War and Peace");

    }


@PostMapping
 @PostMapping("/addBooks")
    public ResponseEntity<Book> addbooks(@RequestBody CrateBook createBook) {
        return bookService.addbooks(createBook);
    }

 public ResponseEntity<Book> addbooks(CrateBook createBook) {
        Book book=new Book();
        book.setTilte(createBook.getTilte());
        book.setDescription(createBook.getDescription());



@DelectMapping

@DeleteMapping("/Delectbook")
    public  ResponseEntity <String> removebook (@RequestParam Integer id){
        return bookService.removebook(id);


 public ResponseEntity <String> removebook (Integer id) {
        Optional<Book> optionalBook=bookReposotory.findById(id);
        if(optionalBook.isPresent()){
            bookReposotory.deleteById(id);
            return ResponseEntity.ok("IS A DELECT");
        }
        else {
            return ResponseEntity.notFound().build();
        }
    }


@PutMapping("/Updatebook")
    public ResponseEntity <String>updatebook (@RequestParam Integer id,@RequestParam String newtilte,@RequestParam String  newdescription){
        return bookService.updatebook(id,newtilte,newdescription);
    }
        bookReposotory.save(book);
        ResponseEntity <Book> responseEntity=ResponseEntity.ok(book);
        return responseEntity;
    }

public ResponseEntity <String> updatebook (Integer id,String newtilte,String  newdescription){
        Optional<Book> optionalBook=bookReposotory.findById(id);
        if(optionalBook.isPresent()){
            Book book=optionalBook.get();
            book.setTilte(newtilte);
            book.setDescription(newdescription);
            bookReposotory.save(book);
            return ResponseEntity.ok("It Is Updates");

        }else  {
            return ResponseEntity.notFound().build();
        }

    }
